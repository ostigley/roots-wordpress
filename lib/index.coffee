// Generated by CoffeeScript 1.7.0
(function() {
  var API, RootsUtil, W, add_posts_to_locals, add_urls_to_posts, path, render_single_views, request, _;

  API = require('./api');

  W = require('when');

  RootsUtil = require('roots-util');

  _ = require('lodash');

  path = require('path');

  module.exports = function(opts) {
    var RootsWordpress;
    if (opts == null) {
      opts = {};
    }
    if (!opts.site) {
      throw new Error('You must supply a site url or id');
    }
    if (!opts.post_types) {
      opts.post_types = {
        post: {}
      };
    }
    return RootsWordpress = (function() {
      function RootsWordpress(roots) {
        this.roots = roots;
        this.util = new RootsUtil(this.roots);
        opts.site = opts.site.replace(/http:\/\//, '');
      }

      RootsWordpress.prototype.setup = function() {
        var all, config, type, _base;
        if ((_base = this.roots.config).locals == null) {
          _base.locals = {};
        }
        this.roots.config.locals.wordpress = {};
        all = (function() {
          var _ref, _results;
          _ref = opts.post_types;
          _results = [];
          for (type in _ref) {
            config = _ref[type];
            _results.push(request(opts.site, type, config).then(render_single_views.bind(this, config, type)).then(add_urls_to_posts).then(add_posts_to_locals.bind(this, type)));
          }
          if (config.tag_tree) {
            _results.push(request(opts.site, type, config)
              .then(function (res) {
                var tag_tree = create_tag_tree(res.entity.posts)
                render_tag_views(config.tag_tree, tag_tree).then(add_posts_to_locals.bind(this, 'tag_tree', tag_tree))
              }.bind(this))
              )
          }
          return _results;
        }).call(this);
        return W.all(all);
      };

      return RootsWordpress;

    })();
  };

  request = function(site, type, config) {
    var params;
    params = _.merge(config, {
      type: type
    });
    return API({
      path: "" + site + "/posts",
      params: params
    });
  };

  render_tag_views = function(config, tag_tree) {
    var tags = Object.keys(tag_tree);

    return W.map(tags, (function(_this) {
      return function(p) {
        var compiler, locals, output, tpl;
        tpl = path.join(_this.roots.root, config.template);
        locals = _.merge(_this.roots.config.locals, {
          tag: tag_tree[p]
        });
        output = "" + type + "/" + p.slug + ".html";
        compiler = _.find(_this.roots.config.compilers, function(c) {
          return _.contains(c.extensions, path.extname(tpl).substring(1));
        });
        return compiler.renderFile(tpl, _.cloneDeep(locals)).then(function(res) {
          return _this.util.write(output, res.result);
        })["yield"](output);
      };
    })(this))

  }

  render_single_views = function(config, type, res) {
    var posts;
    posts = res.entity.posts;
    if (!config.template) {
      return {
        urls: [],
        posts: posts
      };
    }
    return W.map(posts, (function(_this) {
      return function(p) {
        var compiler, locals, output, tpl;
        tpl = path.join(_this.roots.root, config.template);
        locals = _.merge(_this.roots.config.locals, {
          post: p
        });
        output = "" + type + "/" + p.slug + ".html";
        compiler = _.find(_this.roots.config.compilers, function(c) {
          return _.contains(c.extensions, path.extname(tpl).substring(1));
        });
        return compiler.renderFile(tpl, _.cloneDeep(locals)).then(function(res) {
          return _this.util.write(output, res.result);
        })["yield"](output);
      };
    })(this)).then(function(urls) {
      return {
        urls: urls,
        posts: posts
      };
    });
  };

  add_urls_to_posts = function(obj) {
    return obj.posts.map(function(post, i) {
      post._url = obj.urls[i];
      return post;
    });
  };

  add_posts_to_locals = function(type, posts) {
    return this.roots.config.locals.wordpress[type] = posts;
  };

  create_tag_tree = function (posts) {
    var tag_tree = {}
    posts.map(function(post){
      Object.keys(post.tags).map(function(tag) {
        var slug = post.tags[tag].slug
        if(!tag_tree[slug]) {
          tag_tree[slug] = {posts: [post], slug: slug}
        } else {
          tag_tree[slug].posts.push(post)
        }
      })
    })
    return tag_tree
  }

}).call(this);
